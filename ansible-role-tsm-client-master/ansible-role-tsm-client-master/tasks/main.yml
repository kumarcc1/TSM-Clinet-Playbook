---

######################################################################
# Preparation
######################################################################

- name: Install required packages for SELinux (Red Hat)
  yum:
    name: libselinux-python
    state: present
  when: ansible_os_family == 'RedHat'

- name: Install required packages for TSM Client (Red Hat)
  yum:
    name: "{{ item }}"
    state: present
  with_items: tsm_client_dependencies
  when: ansible_os_family == 'RedHat'

######################################################################
# Installation
######################################################################

- name: Verify if installation is already done
  stat:
    path: "{{ tsm_client_install_path }}/tsm/client/ba/bin/dsmc"
  register: dsmc

- name: Create temporary installation folder
  file:
    path: "/tmp/tsm_install"
    state: directory
    mode: 0750
  when: dsmc.stat.isreg is not defined

- name: Untar retrieved archive
  unarchive:
    src: "{{ tsm_client_archive_uri }}{{ tsm_client_archive_file }}"
    dest: "/tmp/tsm_install"
    creates: "/tmp/tsm_install/{{ tsm_client_install_rpms[0] }}"
    copy: no
  when: dsmc.stat.isreg is not defined

- name: Install provided RPMs
  yum:
    name: "/tmp/tsm_install/{{ item }}"
    disable_gpg_check: yes
    state: present
  with_items: tsm_client_install_rpms
  when: dsmc.stat.isreg is not defined

######################################################################
# Client Configuration
######################################################################

- name: Deploy configuration files
  template:
    src: "{{ item }}.j2"
    dest: "{{ tsm_client_bin_path }}/{{ item }}"
    backup: yes
  with_items:
    - dsm.opt
    - dsm.sys
    - "{{ tsm_client_incl_excl_file }}"
  notify: Restart TSM

- name: Copy TSM Schedule startup script
  copy:
    src: dsmc-schedule.sh
    dest: /etc/init.d/dsmc-schedule
    mode: 0755
  notify: Restart TSM

######################################################################

- name: Enable TSM at boot
  service:
    name: "{{ item }}"
    state: started
    enabled: yes
  with_items: tsm_client_use_daemons

# If we arrive here, then installation was successful, we can remove
# installation files.
- name: Remove temporary installation folder
  file:
    path: "/tmp/tsm_install"
    state: absent
  when: dsmc.stat.isreg is not defined

######################################################################
# Server Configuration
######################################################################
# All this steps are done on the server itself.

# Verify on the TSM server that the current node is not already registered:
# dsmadmc q node NODE_NAME
- name: Check if registering is required (on the server)
  delegate_to: "{{ tsm_client_server_in_inventory }}"
  command: dsmadmc -id={{ tsm_client_server_tsm_login }} -pa={{ tsm_client_server_tsm_password }} q node {{ tsm_client_node_name }}
  ignore_errors: yes
  changed_when: no
  register: node_already_registered
  when: tsm_client_server_in_inventory is defined and tsm_client_server_in_inventory != ''

# If the node is not registered yet, then let's do it:
# dsmadmc register node NODE_NAME NODE_PASSWORD do=DOMAIN_NAME
- name: Register the client (on the server)
  delegate_to: "{{ tsm_client_server_in_inventory }}"
  command: dsmadmc -id={{ tsm_client_server_tsm_login }} -pa={{ tsm_client_server_tsm_password }} register node {{ tsm_client_node_name }} {{ tsm_client_node_password }} do={{ tsm_client_node_domain }} cloptset={{tsm_client_node_cloptset }}
  when: tsm_client_server_in_inventory is defined and tsm_client_server_in_inventory != '' and node_already_registered|failed

# Then associate the node to specific domain and schedule:
# dsmadmc define assoc DOMAIN_NAME SCHEDULE_NAME NODE_NAME
- name: Define the association for the client (on the server)
  delegate_to: "{{ tsm_client_server_in_inventory }}"
  command: dsmadmc -id={{ tsm_client_server_tsm_login }} -pa={{ tsm_client_server_tsm_password }} define assoc {{ tsm_client_node_domain }} {{ tsm_client_node_schedule }} {{ tsm_client_node_name }}
  when: tsm_client_server_in_inventory is defined and tsm_client_server_in_inventory != '' and node_already_registered|failed

######################################################################
# Finalize the client configuration
######################################################################

- name: Set the password on the client
  command: dsmc set password "{{ tsm_client_node_password }}" "{{ tsm_client_node_password }}" -optfile={{ tsm_client_bin_path }}/dsm.opt
  when: tsm_client_server_in_inventory is defined and tsm_client_server_in_inventory != '' and node_already_registered|failed

- name: Finally setup the client
  command: dsmc q se
  when: tsm_client_server_in_inventory is defined and tsm_client_server_in_inventory != '' and node_already_registered|failed

# vim: ft=ansible
